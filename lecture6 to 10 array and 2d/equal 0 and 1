method 1

int maxLen(int arr[], int N)
    {
        // Your code here

        int sum =0;
        for(int i=0;i<N;i++){
            int c0=0,c1=0;
            for(int j=i;j<N;j++){
                if(arr[j]==0){
                    c0++;
                }
                else{
                    c1++;
                }
                if(c0 == c1){
                    sum = max(sum,j-i+1);
                }
            }
        }
        return sum;
    }

method 2:::

treat 0 as -1 and 1 and 1


#include<bits/stdc++.h>
using namespace std;
 void maxLen(int arr[],int n){
    unordered_map<int,int>mp;

    int sum =0;
    int ans =0;
    for(int i=0;i<n;i++){
            //if first index is 0 then set it to -1
        if(arr[i]==0){
            sum += -1;
        }
        //for first element to  1 set it to 1
        else if(arr[i]==1){
            sum += 1;
        }
        if(sum ==0 ){
            ans = max(ans ,i+1);
        }
        if(mp.count(sum)){
                ans = max(ans, i-mp[sum]);

        }
        else{
            mp[sum] =i;
        }
    }
    cout<< ans<<" ";

 }
int main(){

int arr[] = {0, 1, 1, 0 ,0 ,1, 1, 1, 0};

     maxLen(arr,9);

}
